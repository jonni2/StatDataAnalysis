RooFit utilities

You can execute a RooFit.C program by:
1. open root and execute .x RooFit.C
2. compile with g++ Macro.C `root-config --cflags --libs`

1) RooRealVar: this represents a numerical variable/constant. It has different constructors:
    RooRealVar var1("v1", "My 1st var", 5.7); #Constant var
    RooRealVar var2("v2", "My 2nd var", 1., 10.); #Range [1., 10.]
    RooRealVar var3("v3", "My 3rd var", 3., 1., 10.); #Range [1., 10.], initial value 3.
    RooRealVar time("time", "Decay time", 0., 100., "ms"); #Range and meas unit [ms]
    RooConstVar v("v", "Var name", 0.5) #Constant var
    
2) Probability Density functions (pdf):
    - RooGaussian gauss("gauss", "gaussian PDF", x, mean, sigma); #x, mean, sigma are RooRealVar
    - RooPolynomial pol("pol", "polynomial order n", x, RooArgList(c0, c1, c2...)); #RooArgList() allows to create a LIST of params (c0, c1... are RooRealVar) which define the ORDERS of powers of the Polynomial.
    (!) To have a CONSTANT (pol0 in Root) you can just put RooArgList() or PASS NOTHING at that parameter position.
    Ex. RooPolynomial uniform("pol0", "Uniform pdf", x); #UNIFORM (NOT NORMALIZED...)

3) Drawing:
    - RooRealVar x("", "", ...);
    RooGaussian gauss("", "", x, mean, sigma);
    RooPlot* xframe = x.frame(RooFit::Title("Title"));
    gauss.plotOn(xframe);
    TCanvas* c = new TCanvas("c", "c"); //Optional
    xframe->Draw();    
    - gauss.plotOn(xframe, RooFit::LineColor(kRed), RooFit::LineStyle(...)); //Draw COLORS and line STYLES (kDashed...)!
    - gauss.plotOn(xframe, RooFit::LineColor(kRed), RooFit::Components("comp")); //Component of COMPOSITE MODEL
    
4) Composite model:
    - PDFs FRACTIONS (N PDFs, N-1 coefs (float [0, 1])):
    RooAddPdf model("model", "composite model", RooArgList(pdf1, pdf2, ..., pdfN), RooArgList(f1, f2, ..., fN-1));
    - PDFs expected EVENTS (N PDFs, N coefs):
    RooAddPdf model("model", "composite model", RooArgList(pdf1, ..., pdfN), RooArgList(n1, ..., nN));

5) GENERATING random DATA:
    - UNBINNED DataSet:
    RooDataSet* data = gauss.generate(x, 1000);
    - BINNED DataSet:
    x.setBins(20);
    RooDataHist* data = gauss.generateBinned(RooArgSet(x), 1000);

6) READING ROOT File:
    1. First you must CREATE a TH1F:
    TFile* file = new TFile("FileName.root", "READ");
    file->ls(); //List the TFile Content
    TH1F* h = (TH1F*)file->Get("HistoName;1");
    
    2. Create the RooDataHist:
    RooRealVar x("x", "x title", 0, 10); //Range of histo or smaller
    RooDataHist data("data", "data title", x, RooFit::Import(*h));

7) READING/LOADING data:
    1. Load binned dataset
    RooRealVar x("x", "var", 10, 0, 1000);
    RooDataHist data("data", "data", x);
    ifstream file("ariadne_g012.dat");
    double val, weight;
    while(!file.eof()) {
        file >> val >> weight;
        x.setVal(val);
        data.set(x, weight);
    }
    
    file.close();
    
    2. Load unbinned dataset
    RooRealVar x("x", "var", 0, -1, 10);
    RooDataSet data = *RooDataSet::read("filename.dat", x, "v");

8) RooWorkspace:
    - Create workspace:
    RooWorkspace w("w");
    - Create model:
    w.factory("Gaussian::g(x[-10, 10], m[0, -10, 10], s[0.5, 0, 1])");
    - Extract things from RooWorkspace:
    w.pdf("pdf_NAME")
    w.var("var_NAME")
    w.function("function_NAME")
    w.snapshot("Name")
    w.set // Extract set of objects??
    w.obj("generic object")

9) COMPILE Root program (Test.cpp):
    - Program must contain a int main() {}
    - g++ -fsanitize=address Test.cpp $(root-config --glibs --cflags --libs) -o Test.exe

10) Extra utilities:
    - instead of using char* s = "hello", you can use TString s("hello");
